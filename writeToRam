module writeToRam (
   input wire clk,
   input wire write_on,
   input wire [6:0] keys,
   input wire [1:0] data_in_octive,
   output reg [3:0] data_out_note,
   output reg [5:0] data_out_time,
   output  reg checkNote,
   output reg checkTime
);

parameter N = 32;
//将开关值换为node
reg [3:0]note;
always@(*)begin
    case(keys)
    7'b0000001:note=4'b0001;
    7'b0000010:note=4'b0010;
    7'b0000100:note=4'b0011;
    7'b0001000:note=4'b0100;
    7'b0010000:note=4'b0101;
    7'b0100000:note=4'b0110;
    7'b1000000:note=4'b0111;
   default
    note=4'b0000;
endcase
end
//增加一个debounding方法去抗抖动,记录当前按键值
reg [N-1:0] counter1 = 0;  // N 是计数器的位宽
reg slow_clk = 0;
parameter DIVIDE_VALUE=100000;//设置慢速时钟的频率为clk的十万分之一，也就是10Hz
always @(posedge clk) begin
    if (counter1 == DIVIDE_VALUE-1) begin
        slow_clk <= ~slow_clk;
        counter1 <= 0;
    end
    else begin
     counter1 <= counter1 + 1;
    end
end
reg switch_state = 0;      // 当前开关状态
reg switch_last = 0;       // 上一个时钟周期的开关状态
//记录当前打开的开关值
always @(posedge slow_clk) begin
switch_last=switch_state;
    case(keys)
7'b0000000:switch_state<=0;
default
switch_state<=1;
endcase

    if (write_on) begin 
    // 用条件语句模拟上升沿，当开关从关闭变为打开时记录数据
    if (switch_state && !switch_last) begin
       data_out_note<=note;
    end
    // 用条件语句模拟下降沿，当开关关闭时准备记录下一个数据
    else if (!switch_state && switch_last) begin
            checkNote<=1'b1;  
         end
    end
end


//写一个方法去计算持续时长：可以使用always加count

parameter DATA_WIDTH = 8; // 假设数据宽度为 8 位
reg [31:0] counter = 0;    // 计时器


always @(posedge clk) begin
    if (write_on) begin
    // 用条件语句模拟上升沿，当开关从关闭变为打开时开始计时
    if (switch_state && !switch_last) begin
        counter <= 0; // 重置计数器
    end
    // 用条件语句模拟高电平状态，当开关处于打开状态时计时
    else if (switch_state) begin
        counter <= counter + 1;
    end
    // 用条件语句模拟下降沿，当开关关闭时停止计时并记录持续时间
    else if (!switch_state && switch_last) begin
    if(0<counter<500000)begin counter=1; end
    else if(500000<counter<1000000)begin counter=2; end
    else if(1000000<counter<1500000)begin counter=3;end
    else if(1500000<counter<2000000)begin counter=4;end
    else if(2000000<counter<2500000)begin counter=5;end
    else if(2500000<counter<3000000)begin counter=6;end
    else begin counter=7;end

            data_out_time <= counter;
            checkTime<=1'b1; // 更新持续时间 
         end

    end
end

endmodule
