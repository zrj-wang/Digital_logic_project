`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/12/07 00:52:49
// Design Name: 
// Module Name: mode_auto
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


 
module mode_competition(
    input wire clk, // Clock signal
    input wire [1:0] song_select, // Input to choose song
    input wire [6:0] switches, // Input from 7 switches
    input wire reset, // Reset signal
    input wire [1:0] octave_competition, // Input to choose the proper octave
    output reg [3:0] note_to_play, // Output to buzzer
    output reg [6:0] led_out, // LED output
    output reg [1:0] octave_out, // Output the octave value
    output wire [3:0] num, // Number output
    input wire [1:0] speed_select, // Input to select speed
    output reg [3:0] score, // Output for the score
    input wire play_state, // Play state signal
    input wire user, // User input signal
    output reg [3:0] score_A, // Score for player A
    output reg [3:0] score_B // Score for player B

);


// Variables for song and speed control
reg [3:0] song_num = song_1; // Current song number
reg [1:0] num_speed = speed_mid; // Current speed setting

// Arrays to store song data
wire [3:0] song[song_time-1:0];
wire [song_time*4-1:0] song_packed; // Packed array for song data

// Arrays for time continuation and octave data
wire [song_time*4-1:0] continue;
wire [3:0] time_continue[song_time-1:0];
wire [1:0] octave[song_time-1:0];
wire [song_time*2-1:0] octave_packed; // Packed array for octave data

// Variables to track previous selections
reg [1:0] prev_song_select;
reg [1:0] prev_speed_select;

// Variables for playing logic
integer play_position = 0; // Current position in the song
integer note_counter = 0; // Counter for note duration
integer time_mul = 0; // Multiplier for note duration

// Variables related to scoring
integer right = 0; // Number of correct notes
integer already = 0; // Flag to check if note already counted
integer canstart = 1; // Flag to control game start
reg [3:0] score_store_A; // Temporary score storage for player A
reg [3:0] score_store_B; // Temporary score storage for player B

//choose song logic
always @(posedge clk) begin
  begin
        // check for song_select[0] and song_select[1] rising edges
        if (song_select[0] == 1'b1 && prev_song_select[0] == 1'b0) begin
            if (song_num == song_6) begin
                song_num <= song_1;
            end else begin
                song_num <= song_num + 1;
            end

        end
        
        else if (song_select[1] == 1'b1 && prev_song_select[1] == 1'b0) begin
            if (song_num == song_1) begin
                song_num <= song_6;
            end else begin
                song_num <= song_num - 1;
            end

        end
        prev_song_select <= song_select; 
    end
end


// //choose speed logic
// always @(posedge clk) begin
//   begin
//         // check for song_select[0] and song_select[1] rising edges
//         if (speed_select[0] == 1'b1 && prev_speed_select[0] == 1'b0) begin
//             if (num_speed == speed_high) begin
//                 num_speed <= speed_low;
//             end else begin
//                 num_speed <= num_speed + 1;
//             end

//         end
        
//         else if (speed_select[1] == 1'b1 && prev_speed_select[1] == 1'b0) begin
//             if (num_speed == speed_low) begin
//                 num_speed <= speed_high;
//             end else begin
//                 num_speed <= num_speed - 1;
//             end

//         end
//         prev_speed_select <= speed_select; 
//     end
// end




// if song_num =(1,3) ,use song from lib, else from mode_free
// Instantiate the Lib, find the song

Lib lib_inst(
    .clk(clk),
    .song_packed(song_packed),
    .song_num(song_num),
    .time_continue(continue),
    .octave_packed(octave_packed),
    .num(num)

);



//unpack song
genvar i;
generate
    for (i = 0; i < song_time; i = i + 1) begin : unpack_loop
        assign song[i] = song_packed[(4*i)+3 : 4*i];
    end
endgenerate


//unpack time
generate
    for (i = 0; i < song_time; i = i + 1) begin : unpack
        assign time_continue[i] = continue[(4*i)+3 : 4*i];
    end
endgenerate

//unpack octave
generate
    for (i = 0; i < song_time; i = i + 1) begin : unpack1
        assign octave[i] = octave_packed[(2*i)+1 : 2*i];
    end
endgenerate

integer ini =0;

//play song


//play song logic
always @(posedge clk, negedge reset) 
begin
    if(ini==0)begin
    score <= 4'b0000;
    ini <=1;
    end
    if (!reset) begin
        canstart <=1;
        play_position <= 0;
        note_counter <= 0;
        time_mul <= time_continue[play_position];
        num_speed<=speed_mid;
        right <= 0;
        score <= 4'b0000;
        already <= 0;
        led_out <= led8;
        note_to_play <=music0;
    end else begin
        

    if(play_state==1'b1)begin
        if(canstart==1)begin
 //time_mul is the time of each note
        case(num_speed)
            speed_low: time_mul <= time_continue[play_position]<<1;
            speed_high: time_mul <= time_continue[play_position]>>1;
            speed_mid: time_mul <= time_continue[play_position];
        endcase
        
        if (note_counter < second* time_mul ) begin
        // continue playing the current note
        note_counter <= note_counter + 1;
    end else begin
        // move to the next note
        note_counter <= 0;
        play_position <= play_position + 1;
        already <= 0;
        if (play_position >= song_time-1) begin
            canstart <=0;
            play_position <= 0;
            note_counter <= 0;
            time_mul <= time_continue[play_position];
            num_speed<=speed_mid;
            right <= 0;
            already <= 0;
            led_out <=led8;
            note_to_play <=music0;
            if(user) begin
            score_A <=score_store_A;
            end else begin
            score_B <= score_store_B;
            end
        end
    end
        //light up led logic
        case (song[play_position])
                music1: led_out <= led1;
                music2: led_out <= led2;
                music3: led_out <= led3;
                music4: led_out <= led4;
                music5: led_out <= led5;
                music6: led_out <= led6;
                music7: led_out <= led7;
                music9:
                begin
                    canstart <=0;
                    play_position <= 0;
                    note_counter <= 0;
                    time_mul <= time_continue[play_position];
                    num_speed<=speed_mid;
                    right <= 0;
                    already <= 0;
                    led_out <=led8;
                    note_to_play <=music0;
                    if(user) begin
                    score_A <=score_store_A;
                    end else begin
                    score_B <= score_store_B;
                    end

                end // begin from the start
                default: led_out <= led8; 
            endcase
        
    
// Logic to check which note is being played based on switches
    if(switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6]) begin
        note_to_play <= music1;
    end else
    if(!switches[0] && switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6]) begin
        note_to_play <= music2;
     end else
    if(!switches[0] && !switches[1] && switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6]) begin
        note_to_play <= music3;
    end else
    if(!switches[0] && !switches[1] && !switches[2] && switches[3] && !switches[4] && !switches[5] && !switches[6]) begin
        note_to_play <= music4;
    end else
    if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && switches[4] && !switches[5] && !switches[6]) begin
        note_to_play <= music5;
    end else
    if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && switches[5] && !switches[6]) begin
        note_to_play <= music6;
    end else
    if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && switches[6]) begin
        note_to_play <= music7;
    end else begin
        note_to_play <= music0;
    end

    octave_out <= octave_competition;
// Function to handle scoring logic
    if(already==0)begin
    if(song[play_position]==music0) begin
            if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6] )begin
                    right <= right + 1;
                    already <= 1;
                end
    end else 
    if(song[play_position]==music1) begin
            if(switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end else
    if(song[play_position]==music2) begin
            if(!switches[0] && switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end else
    if(song[play_position]==music3) begin
            if(!switches[0] && !switches[1] && switches[2] && !switches[3] && !switches[4] && !switches[5] && !switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end else
    if(song[play_position]==music4) begin
            if(!switches[0] && !switches[1] && !switches[2] && switches[3] && !switches[4] && !switches[5] && !switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end else
    if(song[play_position]==music5) begin
            if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && switches[4] && !switches[5] && !switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end else
    if(song[play_position]==music6) begin
            if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && switches[5] && !switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end else
    if(song[play_position]==music7) begin
            if(!switches[0] && !switches[1] && !switches[2] && !switches[3] && !switches[4] && !switches[5] && switches[6] )begin
                if(octave_competition==octave[play_position]) begin
                    right <= right + 1;
                    already <= 1;
                end
            end
    end

    end

    if(right==play_position)begin
        score <=4'b1000;
        if(user) begin
        score_store_A <= score;
        end else begin
        score_store_B <= score;
        end
    end else
    if(3*right > 2*play_position) begin
        score <=4'b0100;
        if(user) begin
                score_store_A <= score;
                end else begin
                score_store_B <= score;
                end
    end else
    if(3*right > play_position) begin
        score <=4'b0010;
        if(user) begin
                score_store_A <= score;
                end else begin
                score_store_B <= score;
                end
    end else
    begin
        score <=4'b0001;
        if(user) begin
                score_store_A <= score;
                end else begin
                score_store_B <= score;
                end
    end


    
        end else begin
            note_to_play <= music0;
            led_out <= led8;
            if(user) begin
            score_A <=score_store_A;
            end else begin
            score_B <= score_store_B;
            end
        end
    end else begin
                // check for song_select[0] and song_select[1] rising edges
        if (speed_select[0] == 1'b1 && prev_speed_select[0] == 1'b0) begin
            if (num_speed == speed_high) begin
                num_speed <= speed_low;
            end else begin
                num_speed <= num_speed + 1;
            end

        end
        
        else if (speed_select[1] == 1'b1 && prev_speed_select[1] == 1'b0) begin
            if (num_speed == speed_low) begin
                num_speed <= speed_high;
            end else begin
                num_speed <= num_speed - 1;
            end

        end
        prev_speed_select <= speed_select;
end
end
end


endmodule
